{"version":3,"sources":["containers/ToDo.module.scss","components/task/task.module.scss","components/input/input.module.scss","components/button/button.module.scss","components/input/input.tsx","components/button/button.tsx","components/task/task.tsx","containers/ToDo.tsx","App.tsx","index.tsx"],"names":["module","exports","input","props","className","styles","input__label","htmlFor","label","autoFocus","onChange","changed","placeholder","type","value","Button","onClick","clicked","button","button__pink","children","Task","task","title","task__content","body","task__status","completed","task__status__green","ToDo","useState","tasks","setTasks","setTitle","setBody","setCompleted","error","setError","useEffect","JSON","parse","localStorage","getItem","taskList","map","id","updatedTasks","indexOfClickedTask","forEach","index","splice","setItem","stringify","onDeleteHandler","status","toDo","content","form","onSubmit","e","preventDefault","length","Math","random","updatedList","event","target","checked","errorMessage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76d40844.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDo\":\"ToDo_toDo__1Sfw7\",\"content\":\"ToDo_content__2Jx8l\",\"form\":\"ToDo_form__2YTsc\",\"taskList\":\"ToDo_taskList__1o60Q\",\"errorMessage\":\"ToDo_errorMessage__32uQ5\",\"button\":\"ToDo_button__1faCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"task_task__2gK2B\",\"task__content\":\"task_task__content__1w7s7\",\"task__status\":\"task_task__status__2GYQN\",\"task__status__green\":\"task_task__status__green__37OHQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"input_input__Q80XR\",\"input__label\":\"input_input__label__6niAg\",\"input__button\":\"input_input__button__2BckE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__H5057\",\"button__pink\":\"button_button__pink__2OIjw\"};","import React from 'react';\nimport styles from './input.module.scss';\n\ninterface Input {\n  type: string;\n  autoFocus?: boolean;\n  changed: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder: string;\n  value?: string;\n  label: string;\n  checked: boolean | null;\n}\n\nconst input: React.FC<Input> = (props) => {\n  return (\n    <div className={styles.input}>\n      <label className={styles.input__label} htmlFor=\"\">\n        {props.label}\n      </label>\n      <input\n        autoFocus={props.autoFocus}\n        onChange={props.changed}\n        placeholder={props.placeholder}\n        type={props.type}\n        value={props.value}\n      />\n    </div>\n  );\n};\n\nexport default input;\n","import styles from './button.module.scss';\n\nconst Button: React.FC<{ clicked?: any; className?: string }> = (props) => {\n  return (\n    <button\n      onClick={props.clicked}\n      className={`${styles.button} ${styles.button__pink}`}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import styles from './task.module.scss';\n\nconst Task: React.FC<{\n  completed: boolean;\n  title: string;\n  body: string;\n  clicked: () => void;\n}> = (props) => {\n  return (\n    <div className={styles.task} onClick={props.clicked}>\n      <h5>{props.title}</h5>\n      <p className={styles.task__content}>{props.body}</p>\n      <p\n        className={`${styles.task__status} ${\n          props.completed === true ? styles.task__status__green : ''\n        }`}\n      >\n        {props.completed === true ? 'Completed' : 'In progress'}\n      </p>\n    </div>\n  );\n};\n\nexport default Task;\n","import { useEffect, useState } from 'react';\nimport styles from './ToDo.module.scss';\n\nimport Input from '../components/input/input';\nimport Button from '../components/button/button';\nimport Task from '../components/task/task';\n\ninterface TaskData {\n  title: string;\n  body: string;\n  status: boolean;\n  id?: number;\n}\n\nconst ToDo = () => {\n  const [tasks, setTasks] = useState<TaskData[] | []>([]);\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [completed, setCompleted] = useState(false);\n  const [error, setError] = useState('');\n\n  const onTitleHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const onBodyHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBody(event.target.value);\n  };\n\n  const onDeleteHandler = (id: number) => {\n    let updatedTasks = [...tasks];\n    let indexOfClickedTask = 0;\n\n    updatedTasks.forEach((task, index) => {\n      if (task.id === id) indexOfClickedTask = index;\n    });\n\n    updatedTasks.splice(indexOfClickedTask, 1);\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n\n    setTasks(updatedTasks);\n  };\n\n  const onStatusHandler = () => {\n    setCompleted(!completed);\n  };\n\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n    setTasks(tasks);\n  }, []);\n\n  function submit(e: React.ChangeEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    if (title.length !== 0 && body.length !== 0) {\n      const task = {\n        title,\n        body,\n        status: completed,\n        id: Math.random() * 100000,\n      };\n\n      let updatedList = [...tasks, task];\n      setTasks(updatedList);\n      setTitle('');\n      setBody('');\n      localStorage.setItem('tasks', JSON.stringify(updatedList));\n    } else setError('You should fill both field first...');\n  }\n\n  let taskList = [];\n  taskList = tasks.map((task: TaskData) => {\n    return (\n      <Task\n        key={task.id}\n        title={task.title}\n        body={task.body}\n        clicked={() => onDeleteHandler(task.id!)}\n        completed={task.status}\n      />\n    );\n  });\n\n  return (\n    <div className={styles.toDo}>\n      <main className={styles.content}>\n        <h2>Write Your Todos</h2>\n        <form className={styles.form} onSubmit={submit}>\n          <Input\n            label=\"Todo Title\"\n            autoFocus\n            changed={onTitleHandler}\n            placeholder={'I.E. To Complete Tesonet Technical Test'}\n            type=\"text\"\n            value={title}\n            checked={null}\n          />\n\n          <Input\n            label=\"Content\"\n            changed={onBodyHandler}\n            placeholder={\n              'I.E. To successfully complete the task by successfully by writing clean TypeScript and React Code'\n            }\n            type=\"text\"\n            value={body}\n            checked={null}\n          />\n\n          <Input\n            label=\"Mark Completed\"\n            changed={onStatusHandler}\n            placeholder={\n              'I.E. To successfully complete the task by successfully by writing clean TypeScript and React Code'\n            }\n            type=\"checkbox\"\n            checked={completed}\n          />\n\n          <p className={styles.errorMessage}>{error}</p>\n\n          <Button className={styles.button}>Add A ToDo</Button>\n        </form>\n\n        <div className={styles.taskList}>{taskList}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default ToDo;\n","import ToDo from './containers/ToDo';\nimport './App.scss';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ToDo />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}